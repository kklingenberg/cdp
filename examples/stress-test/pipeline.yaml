---
# This pipeline is utterly useless, and was only built as an example
# for stress-testing. It features several windows (queues) and several
# parallel processing (using jq). Nothing interesting should be
# expected from the processing logic itself, however.

name: "Checking divisivility and applying primality heuristics"

input:
  http: /events

steps:
  numbers:
    flatmap:
      keep-when:
        type: number

  multiples of two:
    after:
      - numbers
    match/drop: "not.#"
    window:
      events: 100
      seconds: 10
    reduce:
      send-receive-jq:
        jq-expr: ".[].d | if fmod(.; 2) == 0 then empty else . end"
        wrap: "not.multiples.of.two"

  multiples of five:
    after:
      - multiples of two
    window:
      events: 100
      seconds: 10
    reduce:
      send-receive-jq:
        jq-expr: ".[].d | if fmod(.; 5) == 0 then empty else . end"
        wrap: "not.multiples.of.five"

  multiples of seven:
    after:
      - multiples of five
    window:
      events: 100
      seconds: 10
    reduce:
      send-receive-jq:
        jq-expr: ".[].d | if fmod(.; 7) == 0 then empty else . end"
        wrap: "not.multiples.of.seven"

  fermat using a=31:
    after:
      - multiples of seven
    window:
      events: 100
      seconds: 10
    reduce:
      send-receive-jq:
        jq-expr: |-
          def mulmod($a; $b; $m): [$a, $b, 0] | until(
            .[0] == 0;
            [
              (.[0] / 2 | floor),
              fmod(.[1] + .[1]; $m),
              if fmod(.[0]; 2) == 1 then fmod(.[2] + .[1]; $m) else .[2] end
            ]
          ) | .[2];

          def expmod($a; $b; $m): [$b, $a, 1] | until(
            .[0] == 0;
            [
              (.[0] / 2 | floor),
              mulmod(.[1]; .[1]; $m),
              if fmod(.[0]; 2) == 1 then mulmod(.[2]; .[1]; $m) else .[2] end
            ]
          ) | .[2];

          map(
            .d as $n
            | expmod(31; $n - 1; $n)
            | if . == 1 then $n else empty end
          ) | .[]
        wrap: "candidate.fermat.31"

  fermat using a=73:
    after:
      - multiples of seven
    window:
      events: 100
      seconds: 10
    reduce:
      send-receive-jq:
        jq-expr: |-
          def mulmod($a; $b; $m): [$a, $b, 0] | until(
            .[0] == 0;
            [
              (.[0] / 2 | floor),
              fmod(.[1] + .[1]; $m),
              if fmod(.[0]; 2) == 1 then fmod(.[2] + .[1]; $m) else .[2] end
            ]
          ) | .[2];

          def expmod($a; $b; $m): [$b, $a, 1] | until(
            .[0] == 0;
            [
              (.[0] / 2 | floor),
              mulmod(.[1]; .[1]; $m),
              if fmod(.[0]; 2) == 1 then mulmod(.[2]; .[1]; $m) else .[2] end
            ]
          ) | .[2];

          map(
            .d as $n
            | expmod(73; $n - 1; $n)
            | if . == 1 then $n else empty end
          ) | .[]
        wrap: "candidate.fermat.73"

  log candidates:
    after:
      - fermat using a=31
      - fermat using a=73
    flatmap:
      send-stdout:
        jq-expr: |-
          .[] | "The number \(.d) is a prime candidate from \(.n)"
